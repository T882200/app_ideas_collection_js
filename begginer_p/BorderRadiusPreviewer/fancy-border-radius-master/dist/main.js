!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="http://localhost:8080/dist/",t(t.s=6)}([function(n,e,t){"undefined"!=typeof self&&self,n.exports=function(){return e=[function(n,e,t){"use strict";var r=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{u(r.next(n))}catch(n){i(n)}}function s(n){try{u(r.throw(n))}catch(n){i(n)}}function u(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,s)}u((r=r.apply(n,e||[])).next())})},o=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=0<(o=a.trys).length&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=t(1);e.DT=i.DT;var a=function(n){},s=!0,u=function(){(console.warn||console.log).apply(console,arguments)}.bind("[clipboard-polyfill]"),c="text/plain";function l(n){a=n}function d(){s=!1,i.suppressDTWarnings()}function f(n){return r(this,void 0,void 0,function(){var e;return o(this,function(t){if(s&&!n.getData(c)&&u("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call clipboard.suppressWarnings() to suppress this warning."),C()){if(function(n){var e=n.getData(c);if(void 0===e)throw"No `text/plain` value was specified.";return window.clipboardData.setData("Text",e)}(n))return[2];throw"Copying failed, possibly because the user rejected it."}if(w(n))return a("regular execCopy worked"),[2];if(-1<navigator.userAgent.indexOf("Edge"))return a('UA "Edge" => assuming success'),[2];if(x(document.body,n))return a("copyUsingTempSelection worked"),[2];if(function(n){var e=document.createElement("div");e.setAttribute("style","-webkit-user-select: text !important"),e.textContent="temporary element",document.body.appendChild(e);var t=x(e,n);return document.body.removeChild(e),t}(n))return a("copyUsingTempElem worked"),[2];if(void 0!==(e=n.getData(c))&&function(n){a("copyTextUsingDOM");var e=document.createElement("div");e.setAttribute("style","-webkit-user-select: text !important");var t=e;e.attachShadow&&(a("Using shadow DOM."),t=e.attachShadow({mode:"open"}));var r=document.createElement("span");r.innerText=n,t.appendChild(r),document.body.appendChild(e),_(r);var o=document.execCommand("copy");return k(),document.body.removeChild(e),o}(e))return a("copyTextUsingDOM worked"),[2];throw"Copy command failed."})})}function h(n){return r(this,void 0,void 0,function(){return o(this,function(e){return navigator.clipboard&&navigator.clipboard.writeText?(a("Using `navigator.clipboard.writeText()`."),[2,navigator.clipboard.writeText(n)]):[2,f(E(n))]})})}function p(){return r(this,void 0,void 0,function(){var n;return o(this,function(e){switch(e.label){case 0:return n=E,[4,m()];case 1:return[2,n.apply(void 0,[e.sent()])]}})})}function m(){return r(this,void 0,void 0,function(){return o(this,function(n){if(navigator.clipboard&&navigator.clipboard.readText)return a("Using `navigator.clipboard.readText()`."),[2,navigator.clipboard.readText()];if(C())return a("Reading text using IE strategy."),[2,function(){return r(this,void 0,void 0,function(){var n;return o(this,function(e){if(""===(n=window.clipboardData.getData("Text")))throw"Empty clipboard or could not read plain text from clipboard";return[2,n]})})}()];throw"Read is not supported in your browser."})})}e.setDebugLog=l,e.suppressWarnings=d,e.write=f,e.writeText=h,e.read=p,e.readText=m;var b=!1;function g(){b||(s&&u('The deprecated default object of `clipboard-polyfill` was called. Please switch to `import * as clipboard from "clipboard-polyfill"` and see https://github.com/lgarron/clipboard-polyfill/issues/101 for more info.'),b=!0)}var v=function(){function n(){}return n.setDebugLog=function(n){return g(),l(n)},n.suppressWarnings=function(){return g(),d()},n.write=function(n){return r(this,void 0,void 0,function(){return o(this,function(e){return g(),[2,f(n)]})})},n.writeText=function(n){return r(this,void 0,void 0,function(){return o(this,function(e){return g(),[2,h(n)]})})},n.read=function(){return r(this,void 0,void 0,function(){return o(this,function(n){return g(),[2,p()]})})},n.readText=function(){return r(this,void 0,void 0,function(){return o(this,function(n){return g(),[2,m()]})})},n.DT=i.DT,n}();e.default=v;var y=function(){this.success=!1};function w(n){var e=new y,t=function(n,e,t){a("listener called"),n.success=!0,e.forEach(function(e,r){var o=t.clipboardData;o.setData(r,e),r===c&&o.getData(r)!=e&&(a("setting text/plain failed"),n.success=!1)}),t.preventDefault()}.bind(this,e,n);document.addEventListener("copy",t);try{document.execCommand("copy")}finally{document.removeEventListener("copy",t)}return e.success}function x(n,e){_(n);var t=w(e);return k(),t}function _(n){var e=document.getSelection();if(e){var t=document.createRange();t.selectNodeContents(n),e.removeAllRanges(),e.addRange(t)}}function k(){var n=document.getSelection();n&&n.removeAllRanges()}function E(n){var e=new i.DT;return e.setData(c,n),e}function C(){return"undefined"==typeof ClipboardEvent&&void 0!==window.clipboardData&&void 0!==window.clipboardData.setData}},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=["text/plain","text/html"],o=function(){(console.warn||console.log).call(arguments)}.bind(console,"[clipboard-polyfill]"),i=!0;e.suppressDTWarnings=function(){i=!1};var a=function(){function n(){this.m={}}return n.prototype.setData=function(n,e){i&&-1===r.indexOf(n)&&o("Unknown data type: "+n,"Call clipboard.suppressWarnings() to suppress this warning."),this.m[n]=e},n.prototype.getData=function(n){return this.m[n]},n.prototype.forEach=function(n){for(var e in this.m)n(this.m[e],e)},n}();e.DT=a},function(n,e,t){n.exports=t(3)},function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),t(4),function(n){for(var t in n)e.hasOwnProperty(t)||(e[t]=n[t])}(t(0))},function(n,e,t){(function(e,t){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.6+9869a4bc
 */
var r;r=function(){"use strict";function n(n){return"function"==typeof n}var r=Array.isArray?Array.isArray:function(n){return"[object Array]"===Object.prototype.toString.call(n)},o=0,i=void 0,a=void 0,s=function(n,e){p[o]=n,p[o+1]=e,2===(o+=2)&&(a?a(m):w())},u="undefined"!=typeof window?window:void 0,c=u||{},l=c.MutationObserver||c.WebKitMutationObserver,d="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),f="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function h(){var n=setTimeout;return function(){return n(m,1)}}var p=new Array(1e3);function m(){for(var n=0;n<o;n+=2)(0,p[n])(p[n+1]),p[n]=void 0,p[n+1]=void 0;o=0}var b,g,v,y,w=void 0;function x(n,e){var t=this,r=new this.constructor(E);void 0===r[k]&&z(r);var o=t._state;if(o){var i=arguments[o-1];s(function(){return R(o,r,i,t._result)})}else M(t,r,n,e);return r}function _(n){if(n&&"object"==typeof n&&n.constructor===this)return n;var e=new this(E);return O(e,n),e}w=d?function(){return e.nextTick(m)}:l?(g=0,v=new l(m),y=document.createTextNode(""),v.observe(y,{characterData:!0}),function(){y.data=g=++g%2}):f?((b=new MessageChannel).port1.onmessage=m,function(){return b.port2.postMessage(0)}):void 0===u?function(){try{var n=Function("return this")().require("vertx");return void 0!==(i=n.runOnLoop||n.runOnContext)?function(){i(m)}:h()}catch(n){return h()}}():h();var k=Math.random().toString(36).substring(2);function E(){}var C=void 0,S=1,T=2,I={error:null};function F(n){try{return n.then}catch(n){return I.error=n,I}}function A(e,t,r){t.constructor===e.constructor&&r===x&&t.constructor.resolve===_?function(n,e){e._state===S?U(n,e._result):e._state===T?D(n,e._result):M(e,void 0,function(e){return O(n,e)},function(e){return D(n,e)})}(e,t):r===I?(D(e,I.error),I.error=null):void 0===r?U(e,t):n(r)?function(n,e,t){s(function(n){var r=!1,o=function(t,o,i,a){try{t.call(o,function(t){r||(r=!0,e!==t?O(n,t):U(n,t))},function(e){r||(r=!0,D(n,e))})}catch(n){return n}}(t,e,0,0,n._label);!r&&o&&(r=!0,D(n,o))},n)}(e,t,r):U(e,t)}function O(n,e){var t;n===e?D(n,new TypeError("You cannot resolve a promise with itself")):"object"!=(t=typeof e)&&"function"!=t?U(n,e):A(n,e,F(e))}function j(n){n._onerror&&n._onerror(n._result),P(n)}function U(n,e){n._state===C&&(n._result=e,n._state=S,0!==n._subscribers.length&&s(P,n))}function D(n,e){n._state===C&&(n._state=T,n._result=e,s(j,n))}function M(n,e,t,r){var o=n._subscribers,i=o.length;n._onerror=null,o[i]=e,o[i+S]=t,o[i+T]=r,0===i&&n._state&&s(P,n)}function P(n){var e=n._subscribers,t=n._state;if(0!==e.length){for(var r=void 0,o=void 0,i=n._result,a=0;a<e.length;a+=3)r=e[a],o=e[a+t],r?R(t,r,o,i):o(i);n._subscribers.length=0}}function R(e,t,r,o){var i=n(r),a=void 0,s=void 0,u=void 0,c=void 0;if(i){if((a=function(n,e){try{return n(e)}catch(n){return I.error=n,I}}(r,o))===I?(c=!0,s=a.error,a.error=null):u=!0,t===a)return void D(t,new TypeError("A promises callback cannot return that same promise."))}else a=o,u=!0;t._state!==C||(i&&u?O(t,a):c?D(t,s):e===S?U(t,a):e===T&&D(t,a))}var L=0;function z(n){n[k]=L++,n._state=void 0,n._result=void 0,n._subscribers=[]}var B=function(){function n(n,e){this._instanceConstructor=n,this.promise=new n(E),this.promise[k]||z(this.promise),r(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?U(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&U(this.promise,this._result))):D(this.promise,new Error("Array Methods must be provided an Array"))}return n.prototype._enumerate=function(n){for(var e=0;this._state===C&&e<n.length;e++)this._eachEntry(n[e],e)},n.prototype._eachEntry=function(n,e){var t=this._instanceConstructor,r=t.resolve;if(r===_){var o=F(n);if(o===x&&n._state!==C)this._settledAt(n._state,e,n._result);else if("function"!=typeof o)this._remaining--,this._result[e]=n;else if(t===H){var i=new t(E);A(i,n,o),this._willSettleAt(i,e)}else this._willSettleAt(new t(function(e){return e(n)}),e)}else this._willSettleAt(r(n),e)},n.prototype._settledAt=function(n,e,t){var r=this.promise;r._state===C&&(this._remaining--,n===T?D(r,t):this._result[e]=t),0===this._remaining&&U(r,this._result)},n.prototype._willSettleAt=function(n,e){var t=this;M(n,void 0,function(n){return t._settledAt(S,e,n)},function(n){return t._settledAt(T,e,n)})},n}(),H=(N.prototype.catch=function(n){return this.then(null,n)},N.prototype.finally=function(e){var t=this.constructor;return n(e)?this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){throw n})}):this.then(e,e)},N);function N(n){this[k]=L++,this._result=this._state=void 0,this._subscribers=[],E!==n&&("function"!=typeof n&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof N?function(n,e){try{e(function(e){O(n,e)},function(e){D(n,e)})}catch(e){D(n,e)}}(this,n):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return H.prototype.then=x,H.all=function(n){return new B(this,n).promise},H.race=function(n){var e=this;return r(n)?new e(function(t,r){for(var o=n.length,i=0;i<o;i++)e.resolve(n[i]).then(t,r)}):new e(function(n,e){return e(new TypeError("You must pass an array to race."))})},H.resolve=_,H.reject=function(n){var e=new this(E);return D(e,n),e},H._setScheduler=function(n){a=n},H._setAsap=function(n){s=n},H._asap=s,H.polyfill=function(){var n=void 0;if(void 0!==t)n=t;else if("undefined"!=typeof self)n=self;else try{n=Function("return this")()}catch(n){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=n.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(n){}if("[object Promise]"===r&&!e.cast)return}n.Promise=H},(H.Promise=H).polyfill(),H},n.exports=r()}).call(this,t(5),t(6))},function(n,e){var t,r,o=n.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(n){if(t===setTimeout)return setTimeout(n,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(n){t=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(n){r=a}}();var u,c=[],l=!1,d=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):d=-1,c.length&&h())}function h(){if(!l){var n=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++d<e;)u&&u[d].run();d=-1,e=c.length}u=null,l=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(e){try{return r.call(null,n)}catch(e){return r.call(this,n)}}}(n)}}function p(n,e){this.fun=n,this.array=e}function m(){}o.nextTick=function(n){var e=new Array(arguments.length-1);if(1<arguments.length)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];c.push(new p(n,e)),1!==c.length||l||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(n){return[]},o.binding=function(n){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(n){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(n,e){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(n){"object"==typeof window&&(t=window)}n.exports=t}],t={},n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(n){return e[n]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},n.p="",n(n.s=2);function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var e,t}()},function(n,e,t){var r=t(2);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(4)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(3)(!1)).push([n.i,'/* ==========================================================================\n   Normalize.scss settings\n   ========================================================================== */\n/**\n * Includes legacy browser support IE6/7\n *\n * Set to false if you want to drop support for IE6 and IE7\n */\n/* Base\n   ========================================================================== */\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using\n *  `em` units.\n */\nhtml {\n  font-family: sans-serif;\n  /* 1 */\n  -ms-text-size-adjust: 100%;\n  /* 2 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */ }\n\n/**\n * Remove default margin.\n */\nbody {\n  margin: 0; }\n\n/* HTML5 display definitions\n   ========================================================================== */\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block; }\n\n/**\n * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  /* 1 */\n  vertical-align: baseline;\n  /* 2 */ }\n\n/**\n * Prevents modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\naudio:not([controls]) {\n  display: none;\n  height: 0; }\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n[hidden],\ntemplate {\n  display: none; }\n\n/* Links\n   ========================================================================== */\n/**\n * Remove the gray background color from active links in IE 10.\n */\na {\n  background-color: transparent; }\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\na:active, a:hover {\n  outline: 0; }\n\n/* Text-level semantics\n   ========================================================================== */\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\nabbr[title] {\n  border-bottom: 1px dotted; }\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\nb,\nstrong {\n  font-weight: bold; }\n\n/**\n * Address styling not present in Safari and Chrome.\n */\ndfn {\n  font-style: italic; }\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0; }\n\n/**\n * Addresses styling not present in IE 8/9.\n */\nmark {\n  background: #ff0;\n  color: #000; }\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\nsmall {\n  font-size: 80%; }\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\n/* Embedded content\n   ========================================================================== */\n/**\n * 1. Remove border when inside `a` element in IE 8/9/10.\n * 2. Improves image quality when scaled in IE 7.\n */\nimg {\n  border: 0; }\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\nsvg:not(:root) {\n  overflow: hidden; }\n\n/* Grouping content\n   ========================================================================== */\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\nfigure {\n  margin: 1em 40px; }\n\n/**\n * Address differences between Firefox and other browsers.\n */\nhr {\n  box-sizing: content-box;\n  height: 0; }\n\n/**\n * Contain overflow in all browsers.\n */\npre {\n  overflow: auto; }\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.\n */\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em; }\n\n/* Forms\n   ========================================================================== */\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n/**\n * 1. Correct color not being inherited.\n *  Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n * 4. Improves appearance and consistency in all browsers.\n */\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n  margin: 0;\n  /* 3 */ }\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\nbutton {\n  overflow: visible; }\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\nbutton,\nselect {\n  text-transform: none; }\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *  and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *  `input` and others.\n * 4. Removes inner spacing in IE 7 without affecting normal text inputs.\n *  Known issue: inner spacing remains in IE 6.\n */\nbutton,\nhtml input[type="button"],\ninput[type="reset"],\ninput[type="submit"] {\n  -webkit-appearance: button;\n  /* 2 */\n  cursor: pointer;\n  /* 3 */ }\n\n/**\n * Re-set default cursor for disabled elements.\n */\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default; }\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0; }\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\ninput {\n  line-height: normal; }\n\n/**\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n *  Known issue: excess padding remains in IE 6.\n */\ninput[type="checkbox"],\ninput[type="radio"] {\n  box-sizing: border-box;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Fix the cursor style for Chrome\'s increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\ninput[type="number"]::-webkit-inner-spin-button,\ninput[type="number"]::-webkit-outer-spin-button {\n  height: auto; }\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\ninput[type="search"] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  box-sizing: content-box;\n  /* 2 */ }\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n/**\n * Define consistent border, margin, and padding.\n */\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em; }\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren\'t caught out if they zero out fieldsets.\n * 3. Corrects text not wrapping in Firefox 3.\n * 4. Corrects alignment displayed oddly in IE 6/7.\n */\nlegend {\n  border: 0;\n  /* 1 */\n  padding: 0;\n  /* 2 */ }\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\ntextarea {\n  overflow: auto; }\n\n/**\n * Don\'t inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\noptgroup {\n  font-weight: bold; }\n\n/* Tables\n   ========================================================================== */\n/**\n * Remove most spacing between table cells.\n */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\ntd,\nth {\n  padding: 0; }\n\n@keyframes morph {\n  0% {\n    border-radius: 40% 60% 60% 40% / 70% 30% 70% 30%; }\n  100% {\n    border-radius: 40% 60%; } }\n\n@keyframes spin {\n  to {\n    transform: rotate(1turn); } }\n\n*,\n*:before,\n*:after {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  background: #000022;\n  color: white;\n  font-family: \'M PLUS Rounded 1c\', sans-serif;\n  overflow-x: hidden; }\n\n.alert {\n  position: fixed;\n  left: 50%;\n  top: 30%;\n  transform: translate(-50%, 0);\n  color: #000022;\n  font-size: 1.5rem;\n  pointer-events: none;\n  z-index: 100;\n  padding: 1em;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 0.5em;\n  white-space: nowrap; }\n\n.footer {\n  background: rgba(255, 255, 255, 0.15);\n  min-height: 2rem;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.6);\n  font-size: 0.875rem;\n  line-height: 1.2rem;\n  padding: 0.4rem 0; }\n  .footer__heart {\n    padding: 0 0.125em;\n    color: #3023AE; }\n  .footer a {\n    text-decoration: none;\n    color: rgba(255, 255, 255, 0.8); }\n    .footer a:hover {\n      text-decoration: underline; }\n\n.header {\n  margin: 0 0 1rem;\n  text-align: center;\n  position: relative;\n  z-index: 10; }\n  .header__links {\n    margin: 0.5em auto 0;\n    padding-top: 0.25em;\n    max-width: 26.75rem;\n    border-top: 1px solid rgba(255, 255, 255, 0.5); }\n    .header__links a {\n      font-size: 0.75rem;\n      color: #FF0099;\n      text-decoration: none;\n      padding: 0 0.5rem;\n      opacity: 0.8;\n      transition: opacity 0.3s ease-out;\n      white-space: nowrap; }\n      .header__links a svg {\n        width: 1.35em;\n        height: 1.35em;\n        display: inline-block;\n        fill: #FFFFFF;\n        vertical-align: -0.3em;\n        margin-top: -0.125rem; }\n      .header__links a:hover {\n        opacity: 1; }\n    @media screen and (min-width: 33rem) {\n      .header__links {\n        margin-top: 1em;\n        padding-top: 0.5em; }\n        .header__links a {\n          font-size: 0.875rem; } }\n\nh1 {\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  color: rgba(255, 255, 255, 0.8);\n  line-height: 1;\n  margin: 0 0 0.125em;\n  letter-spacing: 0.01em;\n  text-align: center; }\n  @media screen and (min-height: 36.25rem) and (min-width: 25rem) {\n    h1 {\n      font-size: 2rem; } }\n\n.container {\n  min-height: calc(100vh - 2rem);\n  padding-top: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: space-evenly;\n  overflow: hidden;\n  position: relative; }\n  .container::before, .container::after {\n    content: "";\n    width: 70vmax;\n    height: 70vmax;\n    position: absolute;\n    background: rgba(255, 255, 255, 0.07);\n    left: -20vmin;\n    top: -20vmin;\n    animation: morph 15s linear infinite alternate, spin 20s linear infinite;\n    z-index: 1;\n    will-change: border-radius, transform;\n    transform-origin: 55% 55%;\n    pointer-events: none; }\n  .container::after {\n    width: 70vmin;\n    height: 70vmin;\n    left: auto;\n    right: -10vmin;\n    top: auto;\n    bottom: 0;\n    animation: morph 10s linear infinite alternate, spin 26s linear infinite reverse;\n    transform-origin: 20% 20%; }\n\n.generator {\n  width: 60vmin;\n  height: 60vmin;\n  border: 2px dashed rgba(255, 255, 255, 0.4);\n  position: relative;\n  z-index: 3;\n  margin-left: auto;\n  margin-right: auto; }\n  @media screen and (min-width: 31.875rem) {\n    .generator {\n      width: 50vmin;\n      height: 50vmin; } }\n  .generator__shape {\n    width: 100%;\n    height: 100%;\n    background: #FF0099;\n    background-image: linear-gradient(45deg, #3023AE 0%, #FF0099 100%);\n    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;\n    box-shadow: -10vmin 10vmin 0 rgba(255, 255, 255, 0.07); }\n    .generator__shape--8v {\n      border-radius: 10%;\n      background-image: linear-gradient(-225deg, #FFFFFF 0%, rgba(255, 255, 255, 0) 40%, rgba(0, 255, 255, 0) 60%, #0ff 100%), linear-gradient(45deg, #3023AE 0%, #FF0099 100%); }\n  .generator__handle {\n    display: block;\n    position: absolute;\n    cursor: pointer;\n    width: 2.5rem;\n    height: 2.5rem; }\n    .generator__handle:before {\n      content: "";\n      position: absolute;\n      width: 1rem;\n      height: 1rem;\n      left: 0.75rem;\n      top: 0.75rem;\n      background: #FFFFFF;\n      border: 2px solid #000022;\n      transition: box-shadow 0.2s ease-out;\n      will-change: box-shadow; }\n    .generator__handle--second:before {\n      background: #3023AE;\n      border: 2px solid #FFFFFF; }\n    .generator__handle--third:before {\n      background: #FF0099;\n      border: 2px solid #FFFFFF; }\n    .generator__handle--fourth:before {\n      background: #0ff; }\n    .generator__handle--8v.active:before, .generator__handle--8v:hover:before {\n      box-shadow: 0 0 0 4px #FFF;\n      border: 2px solid #000022; }\n    .generator__handle:not(.generator__handle--8v).active:before, .generator__handle:not(.generator__handle--8v):hover:before {\n      background: #0ff;\n      box-shadow: 0 0 0 4px #FFF;\n      border: 2px solid #000022; }\n  .generator #top {\n    top: -1.25rem;\n    left: 30%;\n    transform: translateX(-50%); }\n    .generator #top.generator__handle--8v {\n      left: 10%; }\n  .generator #bottom {\n    bottom: -1.25rem;\n    left: 30%;\n    transform: translateX(-50%); }\n    .generator #bottom.generator__handle--8v {\n      left: 10%; }\n  .generator #left {\n    left: -1.25rem;\n    top: 30%;\n    transform: translateY(-50%); }\n    .generator #left.generator__handle--8v {\n      top: 10%; }\n  .generator #right {\n    right: -1.25rem;\n    top: 30%;\n    transform: translateY(-50%); }\n    .generator #right.generator__handle--8v {\n      top: 10%; }\n  .generator #topRight {\n    top: -1.25rem;\n    left: 90%;\n    transform: translateX(-50%); }\n  .generator #bottomRight {\n    bottom: -1.25rem;\n    left: 90%;\n    transform: translateX(-50%); }\n  .generator #leftBottom {\n    left: -1.25rem;\n    top: 90%;\n    transform: translateY(-50%); }\n  .generator #rightBottom {\n    right: -1.25rem;\n    top: 90%;\n    transform: translateY(-50%); }\n\n.output {\n  width: 90%;\n  text-align: left;\n  margin-top: 1.5em;\n  font-size: 1.125rem;\n  line-height: 1.5;\n  margin-left: auto;\n  margin-right: auto; }\n  .output__label {\n    flex: 0 0 auto;\n    margin-bottom: 0.5em;\n    margin-right: 1em;\n    color: rgba(255, 255, 255, 0.9); }\n  .output__code {\n    display: block;\n    font-family: \'Ubuntu Mono\', monospace;\n    flex-grow: 1;\n    color: #000022;\n    background: #ccc;\n    padding: 0.5em 0.625em;\n    border-radius: 2px;\n    margin-bottom: 0.5em; }\n  .output__button {\n    display: block;\n    border-radius: 2px;\n    background: #FF0099;\n    border: none;\n    color: rgba(255, 255, 255, 0.9);\n    padding: 0.5em 1em;\n    font-weight: bold;\n    width: 100%;\n    transition: background 0.3s ease-out;\n    will-change: background;\n    cursor: pointer; }\n    .output__button:hover {\n      background: #3023AE; }\n  @media screen and (min-width: 30.875rem) {\n    .output {\n      font-size: 1.25rem; }\n      .output__code {\n        border-radius: 2px 0 0 2px;\n        flex-grow: 1;\n        margin-bottom: 0; }\n      .output__button {\n        flex-shrink: 1;\n        border-radius: 0 2px 2px 0;\n        width: auto;\n        text-transform: uppercase;\n        letter-spacing: 0.1em; } }\n  @media screen and (min-width: 43rem) {\n    .output {\n      display: flex;\n      justify-content: stretch;\n      align-items: baseline;\n      max-width: 39rem; } }\n\n.advanced {\n  width: 90%;\n  max-width: 39rem;\n  text-align: left;\n  margin: 0.5em auto;\n  position: relative;\n  z-index: 5;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.9); }\n  @media screen and (min-width: 560px) {\n    .advanced {\n      font-size: 1.25rem; } }\n  .advanced__switch {\n    padding: 0.5em 0;\n    flex-shrink: 0;\n    margin-bottom: 0.5em; }\n  .advanced__settings {\n    display: none; }\n    .advanced__settings.visible {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column; }\n      @media screen and (min-width: 31.25rem) {\n        .advanced__settings.visible {\n          flex-direction: row; } }\n  .advanced__check {\n    visibility: hidden;\n    width: 0;\n    height: 0;\n    display: block;\n    border: none; }\n  .advanced .input-group {\n    align-items: center;\n    margin-left: 1em;\n    margin-bottom: 0.5em;\n    justify-content: space-between;\n    display: flex; }\n    .advanced .input-group label {\n      display: block;\n      margin-right: 0.5em; }\n    .advanced .input-group input[type="number"] {\n      width: 4.5rem; }\n  .advanced__check:checked + .advanced__trigger span:after {\n    background: #FF0099;\n    left: 1.15em;\n    border-radius: 37% 63% 55% 45% / 25% 50% 50% 75%; }\n  .advanced__trigger {\n    display: block;\n    line-height: 1;\n    cursor: pointer; }\n    .advanced__trigger span {\n      display: inline-block;\n      width: 2em;\n      height: 1em;\n      border-radius: 0.5em;\n      background: rgba(255, 255, 255, 0.8);\n      vertical-align: bottom;\n      position: relative; }\n      @media screen and (min-width: 43rem) {\n        .advanced__trigger span {\n          margin-left: 2rem; } }\n      .advanced__trigger span:after {\n        content: "";\n        position: absolute;\n        width: 0.7em;\n        height: 0.7em;\n        border-radius: 50% 56% 29% 70% / 50% 73% 38% 50%;\n        background: #000022;\n        position: absolute;\n        left: 0.15em;\n        top: 0.15em;\n        transition: left 0.3s ease-out, background 0.3s ease-out, border-radius 0.4s ease-in-out; }\n\n.input-group input {\n  border-radius: 2px;\n  border: none;\n  background: #FFFFFF;\n  font-family: \'Ubuntu Mono\', monospace;\n  color: #000022;\n  padding: 0.5em 0.625em; }\n\n@media screen and (min-width: 30.85rem) {\n  .input-group {\n    display: flex;\n    align-items: stretch;\n    flex-grow: 1;\n    margin-bottom: 0; } }\n',""])},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),u=null,c=0,l=[],d=t(5);function f(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function p(n,e){var t=s(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),l.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(n.insertAt.before,t);t.insertBefore(e,o)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=l.indexOf(n);e>=0&&l.splice(e,1)}function b(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return t.nc}();r&&(n.attrs.nonce=r)}return g(e,n.attrs),p(n,e),e}function g(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function v(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var a=c++;t=u||(u=b(e)),r=x.bind(null,t,a,!1),o=x.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",g(e,n.attrs),p(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=b(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=h(n,e);return f(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(s=i[a.id]).refs--,r.push(s)}n&&f(h(n,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var y,w=(y=[],function(n,e){return y[n]=e,y.filter(Boolean).join("\n")});function x(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){"use strict";t.r(e);t(1);var r=t(0),o=t.n(r);function i(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var a=function(){function n(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.shapeElemId,o=void 0===r?"shape":r,i=t.generatorElemId,a=void 0===i?"code":i,s=t.copyCodeId,u=void 0===s?"copy":s,c=t.copiedCodeId,l=void 0===c?"clipboard_copied":c,d=t.boxContainerId,f=void 0===d?"box":d,h=t.widthInputId,p=void 0===h?"width":h,m=t.heightInputId,b=void 0===m?"height":m,g=t.enableAdvancedId,v=void 0===g?"enable-advanced":g,y=t.initState,w=void 0===y?null:y,x=t.moveableElems;!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.generatorElem=document.getElementById(a),this.shapeElem=document.getElementById(o),this.copiedCode=document.getElementById(l),this.boxContainer=document.getElementById(f),this.widthInput=document.getElementById(p),this.heightInput=document.getElementById(b),this.widthInput.onchange=function(){e.updateState(e.widthInput.value,"width")},this.heightInput.onchange=function(){e.updateState(e.heightInput.value,"height")},this.enableAdvanced=document.getElementById(v),this.enableAdvanced.onclick=this.enableAdvancedOnClick.bind(this),this.initState(w),this.initAdvanced(),this.handles=this.initHandles(x),document.getElementById(u).onclick=this.setClipboard.bind(this)}var e,t,r;return e=n,r=[{key:"loadUrlParams",value:function(n){var e,t=/#(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)-(?:(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100)\.(\d\d?|100))?-(\d*).(\d*)/gm,r=["left","top","right","bottom","leftBottom","topRight","rightBottom","bottomRight","height","width"],o={};if(!t.test(n))return null;for(t.lastIndex=0;null!==(e=t.exec(n));)e.forEach(function(n,e){0!=e&&(o[r[e-1]]=n)});return o}}],(t=[{key:"initHandles",value:function(n){throw new Error("You have to implement the method initHandles!")}},{key:"updateBorderRadius",value:function(){throw new Error("You have to implement the method updateBorderRadius!")}},{key:"initState",value:function(n){throw new Error("You have to implement the method initState!")}},{key:"initAdvanced",value:function(){""!==this.state.width&&""!==this.state.height&&(this.enableAdvanced.checked=!0,document.getElementById("dimension-input").classList.add("visible"))}},{key:"enableAdvancedOnClick",value:function(n){this.enableAdvanced.checked?(document.getElementById("dimension-input").classList.add("visible"),this.state.width=this.boxContainer.offsetWidth,this.state.height=this.boxContainer.offsetHeight,this.updateUI()):(document.getElementById("dimension-input").classList.remove("visible"),this.updateState("","width"),this.updateState("","height"),this.boxContainer.style.height="",this.boxContainer.style.width="")}},{key:"setClipboard",value:function(){var n=this;o.a.writeText(this.generatorElem.innerHTML).then(function(){n.copiedCode.innerHTML='<div class="alert">Copied to clipboard 👍</div>'},function(){n.copiedCode.innerHTML='<div class="alert">💔 Not Supported</div>'}),setTimeout(function(){n.copiedCode.innerHTML=""},2e3)}},{key:"setUrlHash",value:function(n){window.history&&"pushState"in window.history?history.pushState(null,null,"#"+n):window.location.hash=n}},{key:"updateState",value:function(n,e){this.state[e]=n,this.updateUI()}},{key:"updateUI",value:function(){this.updateBorderRadius(),this.updateBox()}},{key:"updateBox",value:function(){if(this.enableAdvanced.checked){var n=""==this.state.height?"":this.state.height+"px",e=""==this.state.width?"":this.state.width+"px";this.boxContainer.style.height=n,this.boxContainer.style.width=e,this.heightInput.value=this.state.height,this.widthInput.value=this.state.width}}},{key:"saveUrlParams",value:function(){throw new Error("You have to implement the method saveUrlParams!")}}])&&i(e.prototype,t),r&&i(e,r),n}();function s(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var u=function(){function n(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"x",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:30,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:function(){};!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.axis=r,this.pos=o,this.elem=e,this.onChange=t,this.onDragEnd=i,this.elem.onmousedown=this.dragMouseDown.bind(this),this.elem.ontouchstart=this.dragMouseDown.bind(this),this.setInitPos(o),this.onChange(this.pos,this.elem.id)}var e,t,r;return e=n,(t=[{key:"dragMouseDown",value:function(n){(n=n||window.event).preventDefault(),this.currentSpan=n.target,this.currentSpan.classList.add("active"),document.onmouseup=this.closeDragElement.bind(this),document.ontouchend=this.closeDragElement.bind(this),document.onmousemove=this.elementDrag.bind(this),document.ontouchmove=this.elementDrag.bind(this)}},{key:"elementDrag",value:function(n){if(n=n||window.event,"undefined"!=typeof TouchEvent&&n instanceof TouchEvent){var e=n.changedTouches[0];this.setPos(e.clientX,e.clientY)}else this.setPos(n.clientX,n.clientY)}},{key:"setInitPos",value:function(n){"x"==this.axis?this.elem.style.left=n+"%":this.elem.style.top=n+"%"}},{key:"setPos",value:function(n,e){var t=this.elem.parentNode.getBoundingClientRect();"x"==this.axis?(this.pos=this.valBetween((100*(n-5-t.left).toFixed(0)/t.width).toFixed(0),0,100),this.elem.style.left=this.pos+"%"):(this.pos=this.valBetween((100*(e-5-t.top).toFixed(0)/t.height).toFixed(0),0,100),this.elem.style.top=this.pos+"%"),this.onChange(this.pos,this.elem.id)}},{key:"closeDragElement",value:function(){this.currentSpan.classList.remove("active"),this.onDragEnd(),document.onmouseup=null,document.onmousemove=null,document.ontouchend=null,document.ontouchmove=null}},{key:"valBetween",value:function(n,e,t){return Math.min(t,Math.max(e,n))}}])&&s(e.prototype,t),r&&s(e,r),n}();function c(n){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function l(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function d(n,e){return!e||"object"!==c(e)&&"function"!=typeof e?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):e}function f(n){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function h(n,e){return(h=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}var p=function(n){function e(){return function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,f(e).apply(this,arguments))}var t,r,o;return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),e&&h(n,e)}(e,a),t=e,(r=[{key:"initState",value:function(n){this.state=null==n?{left:30,right:30,top:30,bottom:30,width:"",height:"",advancedMode:!1}:n}},{key:"initHandles",value:function(n){return{left:new u(n.left,this.updateState.bind(this),"y",this.state.left,this.saveUrlParams.bind(this)),right:new u(n.right,this.updateState.bind(this),"y",this.state.right,this.saveUrlParams.bind(this)),top:new u(n.top,this.updateState.bind(this),"x",this.state.top,this.saveUrlParams.bind(this)),bottom:new u(n.bottom,this.updateState.bind(this),"x",this.state.bottom,this.saveUrlParams.bind(this))}}},{key:"updateBorderRadius",value:function(){var n=this.state.top+"% ";n+=100-this.state.top+"% ",n+=100-this.state.bottom+"% ",n+=this.state.bottom+"% / ",n+=this.state.left+"% ",n+=this.state.right+"% ",n+=100-this.state.right+"% ",n+=100-this.state.left+"% ",this.shapeElem.style["border-radius"]=n,this.generatorElem.innerHTML=n}},{key:"saveUrlParams",value:function(){var n=this.state,e=n.left,t=n.top,r=n.right,o=n.bottom,i=n.width,a=n.height,s="".concat(e,".").concat(t,".").concat(r,".").concat(o,"--").concat(a,".").concat(i);this.setUrlHash(s)}}])&&l(t.prototype,r),o&&l(t,o),e}(),m={left:document.getElementById("left"),right:document.getElementById("right"),bottom:document.getElementById("bottom"),top:document.getElementById("top")},b=p.loadUrlParams(window.location.href);new p({moveableElems:m,initState:b})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,